<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="elasticsearch" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- Change also me.snov.newrelic.elasticsearch.ElasticsearchAgent.VERSION -->
    <property name="version" value="1.6.1" />
    <property name="filename" value="newrelic-elasticsearch-plugin-${version}"/>
    <property name="jarfile" value="plugin.jar" />
    <property name="tarfile" value="${filename}.tar.gz" />

    <property name="main.build.dir" value="build/main" />
    <property name="main.build.classes.dir" value="${main.build.dir}/classes"/>
    <property name="main.build.jar.dir" value="${main.build.dir}/jar"/>
    <property name="main.build.tar.dir" value="${main.build.dir}/tar"/>
    <property name="main.build.tar.src.dir" value="${main.build.tar.dir}/${filename}"/>

    <property name="test.src.dir" location="test"/>
    <property name="test.build.dir" value="build/test" />
    <property name="test.build.classes.dir" value="${test.build.dir}/classes" />
    <property name="test.reports.dir" location="${test.build.dir}/reports"/>

    <property name="src.dir" value="src" />
    <property name="lib.dir" value="lib" />
    <property name="conf.dir" value="config" />
    <property name="dist.dir" location="dist" />

    <property name="sdk.jar" value="${lib.dir}/metrics_publish-2.0.1.jar" />
    <property name="gson.jar" value="${lib.dir}/gson-2.3.1.jar" />
    <property name="junit.jar" value="${lib.dir}/junit-4.12.jar" />
    <property name="hamcrest.jar" value="${lib.dir}/hamcrest-core-1.3.jar" />

    <path id="classpath">
        <pathelement location="${sdk.jar}" />
        <pathelement location="${gson.jar}" />
    </path>

    <path id="classpath.test">
        <pathelement location="${sdk.jar}" />
        <pathelement location="${gson.jar}" />
        <pathelement location="${junit.jar}" />
    </path>

    <target name="clean">
        <echo>Cleaning project...</echo>
        <delete dir="${main.build.dir}" />
        <delete dir="${test.build.dir}" />
        <echo>Done.</echo>
    </target>

    <target name="init" depends="clean">
        <echo>Creating directory: ${build.dir}</echo>
        <mkdir dir="${main.build.dir}" />
        <mkdir dir="${test.build.dir}" />
    </target>

    <target name="retrieve" depends="init-ivy" description="Retrieve dependencies with ivy">
        <ivy:retrieve/>
    </target>

    <target name="compile" depends="init, retrieve">
        <echo>Building project...</echo>
        <mkdir dir="${main.build.classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${main.build.classes.dir}" includeantruntime="false">
            <classpath refid="classpath" />
        </javac>
        <echo>Done.</echo>
    </target>

    <target name="compile-tests" depends="compile" description="Compile tests">
        <echo>Building tests...</echo>
        <mkdir dir="${test.build.classes.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.build.classes.dir}" includeantruntime="false" debug="true">
            <classpath refid="classpath.test" />
            <classpath location="${main.build.classes.dir}" />
        </javac>
    </target>

    <target name="test" depends="compile-tests" description="Run unit tests">
        <echo>Running tests...</echo>
        <mkdir dir="${test.reports.dir}"/>
        <copy todir="${test.build.classes.dir}/resources" verbose="true">
            <fileset dir="${test.src.dir}/resources/"/>
        </copy>
        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="classpath.test" />
            <classpath>
                <pathelement location="${junit.jar}"/>
                <pathelement location="${hamcrest.jar}"/>
                <pathelement path="${main.build.classes.dir}"/>
                <pathelement path="${test.build.classes.dir}"/>
            </classpath>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${test.reports.dir}">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test*.java"/>
                    <exclude name="**/AllTests.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="jar" depends="test, compile" description="create a jar file for the application">
        <mkdir dir="${main.build.jar.dir}"/>
        <tstamp />
        <jar destfile="${main.build.jar.dir}/${jarfile}">
            <manifest>
                <attribute name="Specification-Title" value="New Relic Elasticsearch Plugin" />
                <attribute name="Specification-Vendor" value="Sergey Novikov" />
                <attribute name="Implementation-Vendor" value="Sergey Novikov" />
                <attribute name="Built-Date" value="${TODAY}" />
                <attribute name="Specification-Version" value="${version}" />
                <attribute name="Implementation-Version" value="${version} ${TODAY}" />
                <attribute name="Main-Class" value="me.snov.newrelic.elasticsearch.Main" />
            </manifest>
            <fileset dir="${main.build.classes.dir}"/>
            <zipfileset src="${sdk.jar}" />
            <zipfileset src="${gson.jar}" />
        </jar>
    </target>

    <target name="dist" depends="jar" description="create a downloadable file">
        <mkdir dir="${main.build.tar.src.dir}" />
        <copy todir="${main.build.tar.src.dir}/config">
            <fileset dir="${conf.dir}" />
        </copy>
        <copy file="${main.build.jar.dir}/${jarfile}" todir="${main.build.tar.src.dir}" />
        <tar compression="gzip" destfile="${dist.dir}/${tarfile}">
            <tarfileset dir="${main.build.tar.dir}" />
        </tar>
    </target>

    <property name="ivy.install.version" value="2.3.0" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="offline">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load ivy here from ivy home, in case the user has not already dropped
                it into ant's lib dir (note that the latter copy will always take precedence).
                We will not fail as long as local lib dir exists (it may be empty) and
                ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
</project>
